#ifndef EXPERIMENT_HPP
#define EXPERIMENT_HPP

// Experiment.hpp
// Defines the Experiment class, which manages an experimental setup including
// its configuration file, associated DAQ modules, and runs.

// Standard C++ includes
#include <string> // std::string
#include <vector> // std::vector

// ROOT includes
#include <Rtypes.h> // UInt_t

// Forward declarations to avoid circular dependencies
class DAQModule; // Represents a data acquisition module
class Run;       // Represents an experimental run

// Experiment class
// Encapsulates the name and configuration of an experiment, along with lists
// of DAQ modules and runs. Provides methods to add, remove, and query these.
class Experiment
{
public:
    // Constructors

    // Constructs an Experiment from a configuration file.
    // @param file_name: Path to the experiment configuration file.
    Experiment(const std::string &file_name);

    // Default constructor: creates an empty Experiment with no name or file.
    Experiment();

    // Destructor: cleans up any resources held by the Experiment.
    ~Experiment();

    // Accessors (Getters)

    // Returns the name of the experiment.
    // This typically matches the ROOT Tree name generated by MVME.
    const std::string &GetName() const { return name_; }

    // Returns the name (path) of the configuration file.
    const std::string &GetFileName() const { return file_name_; }

    // Finds and returns a pointer to the DAQModule with the given name.
    // @param module_name: Name of the desired DAQ module.
    // @return Pointer to the module if found, nullptr otherwise.
    const DAQModule *GetDAQModule(const std::string &module_name) const;

    // Returns a const reference to the internal list of DAQModule pointers.
    const std::vector<DAQModule *> &GetDAQModules() const { return daq_modules_; }

    // Finds and returns a pointer to the Run with the specified run number.
    // @param runNumber: Identifier of the run to retrieve.
    // @return Pointer to the run if found, nullptr otherwise.
    const Run *GetRun(UInt_t runNumber) const;

    // Returns a const reference to the internal list of Run pointers.
    const std::vector<Run *> &GetRuns() const { return runs_; }

    // Modifiers (Setters and Mutators)

    // Adds a DAQModule to the experiment.
    // @param module: Pointer to the DAQModule to add.
    void AddDAQModule(DAQModule *module);

    // Removes a DAQModule by name.
    // @param module_name: Name of the module to remove.
    void RemoveDAQModule(const std::string &module_name);

    // Adds a Run to the experiment.
    // @param run: Pointer to the Run to add.
    void AddRun(Run *run);

    // Removes a Run by its run number.
    // @param run_number: Identifier of the run to remove.
    void RemoveRun(UInt_t run_number);

    // Prints detailed information about the experiment, including
    // its name, file, DAQ modules, and runs.
    void PrintInfo() const;

private:
    std::string name_;                     // Experiment name (matches ROOT Tree)
    std::string file_name_;                // Configuration file path
    std::vector<DAQModule *> daq_modules_; // Owned DAQ modules
    std::vector<Run *> runs_;              // Owned runs
};

#endif // EXPERIMENT_HPP